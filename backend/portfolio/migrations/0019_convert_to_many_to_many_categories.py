# Generated by Django 5.2.4 on 2025-08-19 03:25

from django.db import migrations, models


def migrate_categories_forward(apps, schema_editor):
    """
    Migrate existing category/subcategory ForeignKey relationships to ManyToMany
    """
    Project = apps.get_model('portfolio', 'Project')
    Service = apps.get_model('portfolio', 'Service')
    
    # Migrate Project categories
    for project in Project.objects.all():
        if hasattr(project, 'category') and project.category:
            project.categories.add(project.category)
        if hasattr(project, 'subcategory') and project.subcategory:
            project.subcategories.add(project.subcategory)
    
    # Migrate Service categories
    for service in Service.objects.all():
        if hasattr(service, 'category') and service.category:
            service.categories.add(service.category)
        if hasattr(service, 'subcategory') and service.subcategory:
            service.subcategories.add(service.subcategory)


def migrate_categories_backward(apps, schema_editor):
    """
    Reverse migration: move first ManyToMany relationship back to ForeignKey
    """
    Project = apps.get_model('portfolio', 'Project')
    Service = apps.get_model('portfolio', 'Service')
    
    # Migrate Project categories (take first category if multiple)
    for project in Project.objects.all():
        first_category = project.categories.first()
        if first_category:
            project.category = first_category
        first_subcategory = project.subcategories.first()
        if first_subcategory:
            project.subcategory = first_subcategory
        project.save()
    
    # Migrate Service categories (take first category if multiple)
    for service in Service.objects.all():
        first_category = service.categories.first()
        if first_category:
            service.category = first_category
        first_subcategory = service.subcategories.first()
        if first_subcategory:
            service.subcategory = first_subcategory
        service.save()


class Migration(migrations.Migration):

    dependencies = [
        ('portfolio', '0018_remove_service_date_field'),
    ]

    operations = [
        # Step 1: Add new ManyToMany fields
        migrations.AddField(
            model_name='project',
            name='categories',
            field=models.ManyToManyField(blank=True, help_text='Select one or more categories for this project', related_name='projects', to='portfolio.projectcategory'),
        ),
        migrations.AddField(
            model_name='project',
            name='subcategories',
            field=models.ManyToManyField(blank=True, help_text='Select one or more subcategories (optional)', related_name='projects', to='portfolio.projectsubcategory'),
        ),
        migrations.AddField(
            model_name='service',
            name='categories',
            field=models.ManyToManyField(blank=True, help_text='Select one or more categories for this service', related_name='services', to='portfolio.servicecategory'),
        ),
        migrations.AddField(
            model_name='service',
            name='subcategories',
            field=models.ManyToManyField(blank=True, help_text='Select one or more subcategories (optional)', related_name='services', to='portfolio.servicesubcategory'),
        ),
        
        # Step 2: Migrate existing data
        migrations.RunPython(migrate_categories_forward, migrate_categories_backward),
        
        # Step 3: Remove old ForeignKey fields
        migrations.RemoveField(
            model_name='project',
            name='category',
        ),
        migrations.RemoveField(
            model_name='project',
            name='subcategory',
        ),
        migrations.RemoveField(
            model_name='service',
            name='category',
        ),
        migrations.RemoveField(
            model_name='service',
            name='subcategory',
        ),
    ]
